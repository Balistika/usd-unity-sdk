//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace pxr {

public class VtMatrix4dArray : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal VtMatrix4dArray(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(VtMatrix4dArray obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~VtMatrix4dArray() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          UsdCsPINVOKE.delete_VtMatrix4dArray(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

	  public GfMatrix4d this[int index] {
		  get { return GetValue(index); }
		  set { SetValue(index, value); }
	  }
  
  public VtMatrix4dArray() : this(UsdCsPINVOKE.new_VtMatrix4dArray__SWIG_0(), true) {
  }

  public VtMatrix4dArray(uint n) : this(UsdCsPINVOKE.new_VtMatrix4dArray__SWIG_1(n), true) {
  }

  public void push_back(GfMatrix4d elem) {
    UsdCsPINVOKE.VtMatrix4dArray_push_back(swigCPtr, GfMatrix4d.getCPtr(elem));
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void pop_back() {
    UsdCsPINVOKE.VtMatrix4dArray_pop_back(swigCPtr);
  }

  public uint size() {
    uint ret = UsdCsPINVOKE.VtMatrix4dArray_size(swigCPtr);
    return ret;
  }

  public bool empty() {
    bool ret = UsdCsPINVOKE.VtMatrix4dArray_empty(swigCPtr);
    return ret;
  }

  public void reserve(uint num) {
    UsdCsPINVOKE.VtMatrix4dArray_reserve(swigCPtr, num);
  }

  public void resize(uint num) {
    UsdCsPINVOKE.VtMatrix4dArray_resize(swigCPtr, num);
  }

  public void clear() {
    UsdCsPINVOKE.VtMatrix4dArray_clear(swigCPtr);
  }

  public void assign(uint n, GfMatrix4d fill) {
    UsdCsPINVOKE.VtMatrix4dArray_assign(swigCPtr, n, GfMatrix4d.getCPtr(fill));
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void swap(VtMatrix4dArray other) {
    UsdCsPINVOKE.VtMatrix4dArray_swap(swigCPtr, VtMatrix4dArray.getCPtr(other));
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool IsIdentical(VtMatrix4dArray other) {
    bool ret = UsdCsPINVOKE.VtMatrix4dArray_IsIdentical(swigCPtr, VtMatrix4dArray.getCPtr(other));
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool Equals(VtMatrix4dArray lhs, VtMatrix4dArray rhs) {
    bool ret = UsdCsPINVOKE.VtMatrix4dArray_Equals(VtMatrix4dArray.getCPtr(lhs), VtMatrix4dArray.getCPtr(rhs));
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override string ToString() {
    string ret = UsdCsPINVOKE.VtMatrix4dArray_ToString(swigCPtr);
    return ret;
  }

  public void CopyToArray(GfMatrix4d[] dest) {
    UsdCsPINVOKE.VtMatrix4dArray_CopyToArray__SWIG_0(swigCPtr, dest);
  }

  public void CopyFromArray(GfMatrix4d[] src) {
    UsdCsPINVOKE.VtMatrix4dArray_CopyFromArray__SWIG_0(swigCPtr, src);
  }

  public void CopyToArray(System.IntPtr dest) {
    UsdCsPINVOKE.VtMatrix4dArray_CopyToArray__SWIG_1(swigCPtr, dest);
  }

  public void CopyFromArray(System.IntPtr src) {
    UsdCsPINVOKE.VtMatrix4dArray_CopyFromArray__SWIG_1(swigCPtr, src);
  }

  protected GfMatrix4d GetValue(int index) {
    GfMatrix4d ret = new GfMatrix4d(UsdCsPINVOKE.VtMatrix4dArray_GetValue(swigCPtr, index), false);
    return ret;
  }

  protected void SetValue(int index, GfMatrix4d value) {
    UsdCsPINVOKE.VtMatrix4dArray_SetValue(swigCPtr, index, GfMatrix4d.getCPtr(value));
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
