//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace pxr {

public class SdfLayer : SdfLayerBase {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SdfLayer(global::System.IntPtr cPtr, bool cMemoryOwn) : base(UsdCsPINVOKE.SdfLayer_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SdfLayer obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~SdfLayer() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          UsdCsPINVOKE.delete_SdfLayer(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public static SdfLayerRefPtr CreateNew(string identifier, string realPath, SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_t args) {
    SdfLayerRefPtr ret = new SdfLayerRefPtr(UsdCsPINVOKE.SdfLayer_CreateNew__SWIG_0(identifier, realPath, SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_t.getCPtr(args)), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SdfLayerRefPtr CreateNew(string identifier, string realPath) {
    SdfLayerRefPtr ret = new SdfLayerRefPtr(UsdCsPINVOKE.SdfLayer_CreateNew__SWIG_1(identifier, realPath), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SdfLayerRefPtr CreateNew(string identifier) {
    SdfLayerRefPtr ret = new SdfLayerRefPtr(UsdCsPINVOKE.SdfLayer_CreateNew__SWIG_2(identifier), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SdfLayerRefPtr CreateNew(SWIGTYPE_p_SdfFileFormatConstPtr fileFormat, string identifier, string realPath, SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_t args) {
    SdfLayerRefPtr ret = new SdfLayerRefPtr(UsdCsPINVOKE.SdfLayer_CreateNew__SWIG_3(SWIGTYPE_p_SdfFileFormatConstPtr.getCPtr(fileFormat), identifier, realPath, SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_t.getCPtr(args)), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SdfLayerRefPtr CreateNew(SWIGTYPE_p_SdfFileFormatConstPtr fileFormat, string identifier, string realPath) {
    SdfLayerRefPtr ret = new SdfLayerRefPtr(UsdCsPINVOKE.SdfLayer_CreateNew__SWIG_4(SWIGTYPE_p_SdfFileFormatConstPtr.getCPtr(fileFormat), identifier, realPath), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SdfLayerRefPtr CreateNew(SWIGTYPE_p_SdfFileFormatConstPtr fileFormat, string identifier) {
    SdfLayerRefPtr ret = new SdfLayerRefPtr(UsdCsPINVOKE.SdfLayer_CreateNew__SWIG_5(SWIGTYPE_p_SdfFileFormatConstPtr.getCPtr(fileFormat), identifier), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SdfLayerRefPtr New(SWIGTYPE_p_SdfFileFormatConstPtr fileFormat, string identifier, string realPath, SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_t args) {
    SdfLayerRefPtr ret = new SdfLayerRefPtr(UsdCsPINVOKE.SdfLayer_New__SWIG_0(SWIGTYPE_p_SdfFileFormatConstPtr.getCPtr(fileFormat), identifier, realPath, SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_t.getCPtr(args)), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SdfLayerRefPtr New(SWIGTYPE_p_SdfFileFormatConstPtr fileFormat, string identifier, string realPath) {
    SdfLayerRefPtr ret = new SdfLayerRefPtr(UsdCsPINVOKE.SdfLayer_New__SWIG_1(SWIGTYPE_p_SdfFileFormatConstPtr.getCPtr(fileFormat), identifier, realPath), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SdfLayerRefPtr New(SWIGTYPE_p_SdfFileFormatConstPtr fileFormat, string identifier) {
    SdfLayerRefPtr ret = new SdfLayerRefPtr(UsdCsPINVOKE.SdfLayer_New__SWIG_2(SWIGTYPE_p_SdfFileFormatConstPtr.getCPtr(fileFormat), identifier), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SdfLayerHandle Find(string identifier, SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_t args) {
    SdfLayerHandle ret = new SdfLayerHandle(UsdCsPINVOKE.SdfLayer_Find__SWIG_0(identifier, SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_t.getCPtr(args)), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SdfLayerHandle Find(string identifier) {
    SdfLayerHandle ret = new SdfLayerHandle(UsdCsPINVOKE.SdfLayer_Find__SWIG_1(identifier), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SdfLayerHandle FindRelativeToLayer(SdfLayerHandle anchor, string layerPath, SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_t args) {
    SdfLayerHandle ret = new SdfLayerHandle(UsdCsPINVOKE.SdfLayer_FindRelativeToLayer__SWIG_0(SdfLayerHandle.getCPtr(anchor), layerPath, SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_t.getCPtr(args)), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SdfLayerHandle FindRelativeToLayer(SdfLayerHandle anchor, string layerPath) {
    SdfLayerHandle ret = new SdfLayerHandle(UsdCsPINVOKE.SdfLayer_FindRelativeToLayer__SWIG_1(SdfLayerHandle.getCPtr(anchor), layerPath), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SdfLayerRefPtr FindOrOpen(string identifier, SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_t args) {
    SdfLayerRefPtr ret = new SdfLayerRefPtr(UsdCsPINVOKE.SdfLayer_FindOrOpen__SWIG_0(identifier, SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_t.getCPtr(args)), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SdfLayerRefPtr FindOrOpen(string identifier) {
    SdfLayerRefPtr ret = new SdfLayerRefPtr(UsdCsPINVOKE.SdfLayer_FindOrOpen__SWIG_1(identifier), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SdfLayerRefPtr OpenAsAnonymous(string layerPath, bool metadataOnly, string tag) {
    SdfLayerRefPtr ret = new SdfLayerRefPtr(UsdCsPINVOKE.SdfLayer_OpenAsAnonymous__SWIG_0(layerPath, metadataOnly, tag), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SdfLayerRefPtr OpenAsAnonymous(string layerPath, bool metadataOnly) {
    SdfLayerRefPtr ret = new SdfLayerRefPtr(UsdCsPINVOKE.SdfLayer_OpenAsAnonymous__SWIG_1(layerPath, metadataOnly), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SdfLayerRefPtr OpenAsAnonymous(string layerPath) {
    SdfLayerRefPtr ret = new SdfLayerRefPtr(UsdCsPINVOKE.SdfLayer_OpenAsAnonymous__SWIG_2(layerPath), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override SWIGTYPE_p_SdfSchemaBase GetSchema() {
    SWIGTYPE_p_SdfSchemaBase ret = new SWIGTYPE_p_SdfSchemaBase(UsdCsPINVOKE.SdfLayer_GetSchema(swigCPtr), false);
    return ret;
  }

  public static SWIGTYPE_p_SdfLayerHandleSet GetLoadedLayers() {
    SWIGTYPE_p_SdfLayerHandleSet ret = new SWIGTYPE_p_SdfLayerHandleSet(UsdCsPINVOKE.SdfLayer_GetLoadedLayers(), true);
    return ret;
  }

  public bool IsEmpty() {
    bool ret = UsdCsPINVOKE.SdfLayer_IsEmpty(swigCPtr);
    return ret;
  }

  public void TransferContent(SdfLayerHandle layer) {
    UsdCsPINVOKE.SdfLayer_TransferContent(swigCPtr, SdfLayerHandle.getCPtr(layer));
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static SdfLayerRefPtr CreateAnonymous(string tag) {
    SdfLayerRefPtr ret = new SdfLayerRefPtr(UsdCsPINVOKE.SdfLayer_CreateAnonymous__SWIG_0(tag), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SdfLayerRefPtr CreateAnonymous() {
    SdfLayerRefPtr ret = new SdfLayerRefPtr(UsdCsPINVOKE.SdfLayer_CreateAnonymous__SWIG_1(), true);
    return ret;
  }

  public bool IsAnonymous() {
    bool ret = UsdCsPINVOKE.SdfLayer_IsAnonymous(swigCPtr);
    return ret;
  }

  public static bool IsAnonymousLayerIdentifier(string identifier) {
    bool ret = UsdCsPINVOKE.SdfLayer_IsAnonymousLayerIdentifier(identifier);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string GetDisplayNameFromIdentifier(string identifier) {
    string ret = UsdCsPINVOKE.SdfLayer_GetDisplayNameFromIdentifier(identifier);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string ComputeRealPath(string layerPath) {
    string ret = UsdCsPINVOKE.SdfLayer_ComputeRealPath(layerPath);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Save() {
    bool ret = UsdCsPINVOKE.SdfLayer_Save(swigCPtr);
    return ret;
  }

  public bool Export(string filename, string comment, SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_t args) {
    bool ret = UsdCsPINVOKE.SdfLayer_Export__SWIG_0(swigCPtr, filename, comment, SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_t.getCPtr(args));
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Export(string filename, string comment) {
    bool ret = UsdCsPINVOKE.SdfLayer_Export__SWIG_1(swigCPtr, filename, comment);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Export(string filename) {
    bool ret = UsdCsPINVOKE.SdfLayer_Export__SWIG_2(swigCPtr, filename);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool ImportFromString(string arg0) {
    bool ret = UsdCsPINVOKE.SdfLayer_ImportFromString(swigCPtr, arg0);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Clear() {
    UsdCsPINVOKE.SdfLayer_Clear(swigCPtr);
  }

  public bool Reload(bool force) {
    bool ret = UsdCsPINVOKE.SdfLayer_Reload__SWIG_0(swigCPtr, force);
    return ret;
  }

  public bool Reload() {
    bool ret = UsdCsPINVOKE.SdfLayer_Reload__SWIG_1(swigCPtr);
    return ret;
  }

  public static bool ReloadLayers(SWIGTYPE_p_std__setT_SdfLayerHandle_t layers, bool force) {
    bool ret = UsdCsPINVOKE.SdfLayer_ReloadLayers__SWIG_0(SWIGTYPE_p_std__setT_SdfLayerHandle_t.getCPtr(layers), force);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool ReloadLayers(SWIGTYPE_p_std__setT_SdfLayerHandle_t layers) {
    bool ret = UsdCsPINVOKE.SdfLayer_ReloadLayers__SWIG_1(SWIGTYPE_p_std__setT_SdfLayerHandle_t.getCPtr(layers));
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Import(string layerPath) {
    bool ret = UsdCsPINVOKE.SdfLayer_Import(swigCPtr, layerPath);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__setT_std__string_t GetExternalReferences() {
    SWIGTYPE_p_std__setT_std__string_t ret = new SWIGTYPE_p_std__setT_std__string_t(UsdCsPINVOKE.SdfLayer_GetExternalReferences(swigCPtr), true);
    return ret;
  }

  public bool UpdateExternalReference(string oldAssetPath, string newAssetPath) {
    bool ret = UsdCsPINVOKE.SdfLayer_UpdateExternalReference__SWIG_0(swigCPtr, oldAssetPath, newAssetPath);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool UpdateExternalReference(string oldAssetPath) {
    bool ret = UsdCsPINVOKE.SdfLayer_UpdateExternalReference__SWIG_1(swigCPtr, oldAssetPath);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool SplitIdentifier(string identifier, SWIGTYPE_p_std__string layerPath, SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_t arguments) {
    bool ret = UsdCsPINVOKE.SdfLayer_SplitIdentifier(identifier, SWIGTYPE_p_std__string.getCPtr(layerPath), SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_t.getCPtr(arguments));
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string CreateIdentifier(string layerPath, SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_t arguments) {
    string ret = UsdCsPINVOKE.SdfLayer_CreateIdentifier(layerPath, SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_t.getCPtr(arguments));
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string GetIdentifier() {
    string ret = UsdCsPINVOKE.SdfLayer_GetIdentifier(swigCPtr);
    return ret;
  }

  public void SetIdentifier(string identifier) {
    UsdCsPINVOKE.SdfLayer_SetIdentifier(swigCPtr, identifier);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void UpdateAssetInfo(string fileVersion) {
    UsdCsPINVOKE.SdfLayer_UpdateAssetInfo__SWIG_0(swigCPtr, fileVersion);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void UpdateAssetInfo() {
    UsdCsPINVOKE.SdfLayer_UpdateAssetInfo__SWIG_1(swigCPtr);
  }

  public string GetDisplayName() {
    string ret = UsdCsPINVOKE.SdfLayer_GetDisplayName(swigCPtr);
    return ret;
  }

  public string GetRealPath() {
    string ret = UsdCsPINVOKE.SdfLayer_GetRealPath(swigCPtr);
    return ret;
  }

  public string GetFileExtension() {
    string ret = UsdCsPINVOKE.SdfLayer_GetFileExtension(swigCPtr);
    return ret;
  }

  public string GetVersion() {
    string ret = UsdCsPINVOKE.SdfLayer_GetVersion(swigCPtr);
    return ret;
  }

  public string GetRepositoryPath() {
    string ret = UsdCsPINVOKE.SdfLayer_GetRepositoryPath(swigCPtr);
    return ret;
  }

  public string GetAssetName() {
    string ret = UsdCsPINVOKE.SdfLayer_GetAssetName(swigCPtr);
    return ret;
  }

  public VtValue GetAssetInfo() {
    VtValue ret = new VtValue(UsdCsPINVOKE.SdfLayer_GetAssetInfo(swigCPtr), false);
    return ret;
  }

  public string ComputeAbsolutePath(string relativePath) {
    string ret = UsdCsPINVOKE.SdfLayer_ComputeAbsolutePath(swigCPtr, relativePath);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SdfSpecType GetSpecType(SdfPath path) {
    SdfSpecType ret = (SdfSpecType)UsdCsPINVOKE.SdfLayer_GetSpecType(swigCPtr, SdfPath.getCPtr(path));
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool HasSpec(SdfPath path) {
    bool ret = UsdCsPINVOKE.SdfLayer_HasSpec(swigCPtr, SdfPath.getCPtr(path));
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TfTokenVector ListFields(SdfPath path) {
    TfTokenVector ret = new TfTokenVector(UsdCsPINVOKE.SdfLayer_ListFields(swigCPtr, SdfPath.getCPtr(path)), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool HasField(SdfPath path, TfToken fieldName) {
    bool ret = UsdCsPINVOKE.SdfLayer_HasField(swigCPtr, SdfPath.getCPtr(path), TfToken.getCPtr(fieldName));
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool HasFieldDictKey(SdfPath path, TfToken fieldName, TfToken keyPath) {
    bool ret = UsdCsPINVOKE.SdfLayer_HasFieldDictKey(swigCPtr, SdfPath.getCPtr(path), TfToken.getCPtr(fieldName), TfToken.getCPtr(keyPath));
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public VtValue GetField(SdfPath path, TfToken fieldName) {
    VtValue ret = new VtValue(UsdCsPINVOKE.SdfLayer_GetField(swigCPtr, SdfPath.getCPtr(path), TfToken.getCPtr(fieldName)), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public VtValue GetFieldDictValueByKey(SdfPath path, TfToken fieldName, TfToken keyPath) {
    VtValue ret = new VtValue(UsdCsPINVOKE.SdfLayer_GetFieldDictValueByKey(swigCPtr, SdfPath.getCPtr(path), TfToken.getCPtr(fieldName), TfToken.getCPtr(keyPath)), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void EraseField(SdfPath path, TfToken fieldName) {
    UsdCsPINVOKE.SdfLayer_EraseField(swigCPtr, SdfPath.getCPtr(path), TfToken.getCPtr(fieldName));
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void EraseFieldDictValueByKey(SdfPath path, TfToken fieldName, TfToken keyPath) {
    UsdCsPINVOKE.SdfLayer_EraseFieldDictValueByKey(swigCPtr, SdfPath.getCPtr(path), TfToken.getCPtr(fieldName), TfToken.getCPtr(keyPath));
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
  }

  public SdfAssetPath GetColorConfiguration() {
    SdfAssetPath ret = new SdfAssetPath(UsdCsPINVOKE.SdfLayer_GetColorConfiguration(swigCPtr), true);
    return ret;
  }

  public void SetColorConfiguration(SdfAssetPath colorConfiguration) {
    UsdCsPINVOKE.SdfLayer_SetColorConfiguration(swigCPtr, SdfAssetPath.getCPtr(colorConfiguration));
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool HasColorConfiguration() {
    bool ret = UsdCsPINVOKE.SdfLayer_HasColorConfiguration(swigCPtr);
    return ret;
  }

  public void ClearColorConfiguration() {
    UsdCsPINVOKE.SdfLayer_ClearColorConfiguration(swigCPtr);
  }

  public TfToken GetColorManagementSystem() {
    TfToken ret = new TfToken(UsdCsPINVOKE.SdfLayer_GetColorManagementSystem(swigCPtr), true);
    return ret;
  }

  public void SetColorManagementSystem(TfToken cms) {
    UsdCsPINVOKE.SdfLayer_SetColorManagementSystem(swigCPtr, TfToken.getCPtr(cms));
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool HasColorManagementSystem() {
    bool ret = UsdCsPINVOKE.SdfLayer_HasColorManagementSystem(swigCPtr);
    return ret;
  }

  public void ClearColorManagementSystem() {
    UsdCsPINVOKE.SdfLayer_ClearColorManagementSystem(swigCPtr);
  }

  public string GetComment() {
    string ret = UsdCsPINVOKE.SdfLayer_GetComment(swigCPtr);
    return ret;
  }

  public void SetComment(string comment) {
    UsdCsPINVOKE.SdfLayer_SetComment(swigCPtr, comment);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
  }

  public TfToken GetDefaultPrim() {
    TfToken ret = new TfToken(UsdCsPINVOKE.SdfLayer_GetDefaultPrim(swigCPtr), true);
    return ret;
  }

  public void SetDefaultPrim(TfToken name) {
    UsdCsPINVOKE.SdfLayer_SetDefaultPrim(swigCPtr, TfToken.getCPtr(name));
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void ClearDefaultPrim() {
    UsdCsPINVOKE.SdfLayer_ClearDefaultPrim(swigCPtr);
  }

  public bool HasDefaultPrim() {
    bool ret = UsdCsPINVOKE.SdfLayer_HasDefaultPrim(swigCPtr);
    return ret;
  }

  public string GetDocumentation() {
    string ret = UsdCsPINVOKE.SdfLayer_GetDocumentation(swigCPtr);
    return ret;
  }

  public void SetDocumentation(string documentation) {
    UsdCsPINVOKE.SdfLayer_SetDocumentation(swigCPtr, documentation);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
  }

  public double GetStartTimeCode() {
    double ret = UsdCsPINVOKE.SdfLayer_GetStartTimeCode(swigCPtr);
    return ret;
  }

  public void SetStartTimeCode(double startTimecode) {
    UsdCsPINVOKE.SdfLayer_SetStartTimeCode(swigCPtr, startTimecode);
  }

  public bool HasStartTimeCode() {
    bool ret = UsdCsPINVOKE.SdfLayer_HasStartTimeCode(swigCPtr);
    return ret;
  }

  public void ClearStartTimeCode() {
    UsdCsPINVOKE.SdfLayer_ClearStartTimeCode(swigCPtr);
  }

  public double GetEndTimeCode() {
    double ret = UsdCsPINVOKE.SdfLayer_GetEndTimeCode(swigCPtr);
    return ret;
  }

  public void SetEndTimeCode(double endTimeCode) {
    UsdCsPINVOKE.SdfLayer_SetEndTimeCode(swigCPtr, endTimeCode);
  }

  public bool HasEndTimeCode() {
    bool ret = UsdCsPINVOKE.SdfLayer_HasEndTimeCode(swigCPtr);
    return ret;
  }

  public void ClearEndTimeCode() {
    UsdCsPINVOKE.SdfLayer_ClearEndTimeCode(swigCPtr);
  }

  public double GetTimeCodesPerSecond() {
    double ret = UsdCsPINVOKE.SdfLayer_GetTimeCodesPerSecond(swigCPtr);
    return ret;
  }

  public void SetTimeCodesPerSecond(double timeCodesPerSecond) {
    UsdCsPINVOKE.SdfLayer_SetTimeCodesPerSecond(swigCPtr, timeCodesPerSecond);
  }

  public bool HasTimeCodesPerSecond() {
    bool ret = UsdCsPINVOKE.SdfLayer_HasTimeCodesPerSecond(swigCPtr);
    return ret;
  }

  public void ClearTimeCodesPerSecond() {
    UsdCsPINVOKE.SdfLayer_ClearTimeCodesPerSecond(swigCPtr);
  }

  public double GetFramesPerSecond() {
    double ret = UsdCsPINVOKE.SdfLayer_GetFramesPerSecond(swigCPtr);
    return ret;
  }

  public void SetFramesPerSecond(double framesPerSecond) {
    UsdCsPINVOKE.SdfLayer_SetFramesPerSecond(swigCPtr, framesPerSecond);
  }

  public bool HasFramesPerSecond() {
    bool ret = UsdCsPINVOKE.SdfLayer_HasFramesPerSecond(swigCPtr);
    return ret;
  }

  public void ClearFramesPerSecond() {
    UsdCsPINVOKE.SdfLayer_ClearFramesPerSecond(swigCPtr);
  }

  public int GetFramePrecision() {
    int ret = UsdCsPINVOKE.SdfLayer_GetFramePrecision(swigCPtr);
    return ret;
  }

  public void SetFramePrecision(int framePrecision) {
    UsdCsPINVOKE.SdfLayer_SetFramePrecision(swigCPtr, framePrecision);
  }

  public bool HasFramePrecision() {
    bool ret = UsdCsPINVOKE.SdfLayer_HasFramePrecision(swigCPtr);
    return ret;
  }

  public void ClearFramePrecision() {
    UsdCsPINVOKE.SdfLayer_ClearFramePrecision(swigCPtr);
  }

  public string GetOwner() {
    string ret = UsdCsPINVOKE.SdfLayer_GetOwner(swigCPtr);
    return ret;
  }

  public void SetOwner(string owner) {
    UsdCsPINVOKE.SdfLayer_SetOwner(swigCPtr, owner);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool HasOwner() {
    bool ret = UsdCsPINVOKE.SdfLayer_HasOwner(swigCPtr);
    return ret;
  }

  public void ClearOwner() {
    UsdCsPINVOKE.SdfLayer_ClearOwner(swigCPtr);
  }

  public string GetSessionOwner() {
    string ret = UsdCsPINVOKE.SdfLayer_GetSessionOwner(swigCPtr);
    return ret;
  }

  public void SetSessionOwner(string owner) {
    UsdCsPINVOKE.SdfLayer_SetSessionOwner(swigCPtr, owner);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool HasSessionOwner() {
    bool ret = UsdCsPINVOKE.SdfLayer_HasSessionOwner(swigCPtr);
    return ret;
  }

  public void ClearSessionOwner() {
    UsdCsPINVOKE.SdfLayer_ClearSessionOwner(swigCPtr);
  }

  public bool GetHasOwnedSubLayers() {
    bool ret = UsdCsPINVOKE.SdfLayer_GetHasOwnedSubLayers(swigCPtr);
    return ret;
  }

  public void SetHasOwnedSubLayers(bool arg0) {
    UsdCsPINVOKE.SdfLayer_SetHasOwnedSubLayers(swigCPtr, arg0);
  }

  public VtDictionary GetCustomLayerData() {
    VtDictionary ret = new VtDictionary(UsdCsPINVOKE.SdfLayer_GetCustomLayerData(swigCPtr), true);
    return ret;
  }

  public void SetCustomLayerData(VtDictionary value) {
    UsdCsPINVOKE.SdfLayer_SetCustomLayerData(swigCPtr, VtDictionary.getCPtr(value));
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool HasCustomLayerData() {
    bool ret = UsdCsPINVOKE.SdfLayer_HasCustomLayerData(swigCPtr);
    return ret;
  }

  public void ClearCustomLayerData() {
    UsdCsPINVOKE.SdfLayer_ClearCustomLayerData(swigCPtr);
  }

  public SWIGTYPE_p_SdfPrimSpecView GetRootPrims() {
    SWIGTYPE_p_SdfPrimSpecView ret = new SWIGTYPE_p_SdfPrimSpecView(UsdCsPINVOKE.SdfLayer_GetRootPrims(swigCPtr), true);
    return ret;
  }

  public void SetRootPrims(SWIGTYPE_p_SdfPrimSpecHandleVector rootPrims) {
    UsdCsPINVOKE.SdfLayer_SetRootPrims(swigCPtr, SWIGTYPE_p_SdfPrimSpecHandleVector.getCPtr(rootPrims));
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool InsertRootPrim(SWIGTYPE_p_SdfPrimSpecHandle prim, int index) {
    bool ret = UsdCsPINVOKE.SdfLayer_InsertRootPrim__SWIG_0(swigCPtr, SWIGTYPE_p_SdfPrimSpecHandle.getCPtr(prim), index);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool InsertRootPrim(SWIGTYPE_p_SdfPrimSpecHandle prim) {
    bool ret = UsdCsPINVOKE.SdfLayer_InsertRootPrim__SWIG_1(swigCPtr, SWIGTYPE_p_SdfPrimSpecHandle.getCPtr(prim));
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void RemoveRootPrim(SWIGTYPE_p_SdfPrimSpecHandle prim) {
    UsdCsPINVOKE.SdfLayer_RemoveRootPrim(swigCPtr, SWIGTYPE_p_SdfPrimSpecHandle.getCPtr(prim));
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void ScheduleRemoveIfInert(SWIGTYPE_p_SdfSpec spec) {
    UsdCsPINVOKE.SdfLayer_ScheduleRemoveIfInert(swigCPtr, SWIGTYPE_p_SdfSpec.getCPtr(spec));
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemovePrimIfInert(SWIGTYPE_p_SdfPrimSpecHandle prim) {
    UsdCsPINVOKE.SdfLayer_RemovePrimIfInert(swigCPtr, SWIGTYPE_p_SdfPrimSpecHandle.getCPtr(prim));
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemovePropertyIfHasOnlyRequiredFields(SWIGTYPE_p_SdfPropertySpecHandle prop) {
    UsdCsPINVOKE.SdfLayer_RemovePropertyIfHasOnlyRequiredFields(swigCPtr, SWIGTYPE_p_SdfPropertySpecHandle.getCPtr(prop));
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveInertSceneDescription() {
    UsdCsPINVOKE.SdfLayer_RemoveInertSceneDescription(swigCPtr);
  }

  public void SetRootPrimOrder(TfTokenVector names) {
    UsdCsPINVOKE.SdfLayer_SetRootPrimOrder(swigCPtr, TfTokenVector.getCPtr(names));
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void InsertInRootPrimOrder(TfToken name, int index) {
    UsdCsPINVOKE.SdfLayer_InsertInRootPrimOrder__SWIG_0(swigCPtr, TfToken.getCPtr(name), index);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void InsertInRootPrimOrder(TfToken name) {
    UsdCsPINVOKE.SdfLayer_InsertInRootPrimOrder__SWIG_1(swigCPtr, TfToken.getCPtr(name));
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveFromRootPrimOrder(TfToken name) {
    UsdCsPINVOKE.SdfLayer_RemoveFromRootPrimOrder(swigCPtr, TfToken.getCPtr(name));
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveFromRootPrimOrderByIndex(int index) {
    UsdCsPINVOKE.SdfLayer_RemoveFromRootPrimOrderByIndex(swigCPtr, index);
  }

  public void ApplyRootPrimOrder(TfTokenVector vec) {
    UsdCsPINVOKE.SdfLayer_ApplyRootPrimOrder(swigCPtr, TfTokenVector.getCPtr(vec));
  }

  public void SetSubLayerPaths(StdStringVector newPaths) {
    UsdCsPINVOKE.SdfLayer_SetSubLayerPaths(swigCPtr, StdStringVector.getCPtr(newPaths));
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
  }

  public uint GetNumSubLayerPaths() {
    uint ret = UsdCsPINVOKE.SdfLayer_GetNumSubLayerPaths(swigCPtr);
    return ret;
  }

  public void InsertSubLayerPath(string path, int index) {
    UsdCsPINVOKE.SdfLayer_InsertSubLayerPath__SWIG_0(swigCPtr, path, index);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void InsertSubLayerPath(string path) {
    UsdCsPINVOKE.SdfLayer_InsertSubLayerPath__SWIG_1(swigCPtr, path);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveSubLayerPath(int index) {
    UsdCsPINVOKE.SdfLayer_RemoveSubLayerPath(swigCPtr, index);
  }

  public SdfLayerOffsetVector GetSubLayerOffsets() {
    SdfLayerOffsetVector ret = new SdfLayerOffsetVector(UsdCsPINVOKE.SdfLayer_GetSubLayerOffsets(swigCPtr), true);
    return ret;
  }

  public SdfLayerOffset GetSubLayerOffset(int index) {
    SdfLayerOffset ret = new SdfLayerOffset(UsdCsPINVOKE.SdfLayer_GetSubLayerOffset(swigCPtr, index), true);
    return ret;
  }

  public void SetSubLayerOffset(SdfLayerOffset offset, int index) {
    UsdCsPINVOKE.SdfLayer_SetSubLayerOffset(swigCPtr, SdfLayerOffset.getCPtr(offset), index);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static SWIGTYPE_p_std__setT_std__string_t GetMutedLayers() {
    SWIGTYPE_p_std__setT_std__string_t ret = new SWIGTYPE_p_std__setT_std__string_t(UsdCsPINVOKE.SdfLayer_GetMutedLayers(), true);
    return ret;
  }

  public bool IsMuted() {
    bool ret = UsdCsPINVOKE.SdfLayer_IsMuted__SWIG_0(swigCPtr);
    return ret;
  }

  public static bool IsMuted(string path) {
    bool ret = UsdCsPINVOKE.SdfLayer_IsMuted__SWIG_1(path);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetMuted(bool muted) {
    UsdCsPINVOKE.SdfLayer_SetMuted(swigCPtr, muted);
  }

  public static void AddToMutedLayers(string mutedPath) {
    UsdCsPINVOKE.SdfLayer_AddToMutedLayers(mutedPath);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void RemoveFromMutedLayers(string mutedPath) {
    UsdCsPINVOKE.SdfLayer_RemoveFromMutedLayers(mutedPath);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_SdfPrimSpecHandle GetPseudoRoot() {
    SWIGTYPE_p_SdfPrimSpecHandle ret = new SWIGTYPE_p_SdfPrimSpecHandle(UsdCsPINVOKE.SdfLayer_GetPseudoRoot(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_SdfSpecHandle GetObjectAtPath(SdfPath path) {
    SWIGTYPE_p_SdfSpecHandle ret = new SWIGTYPE_p_SdfSpecHandle(UsdCsPINVOKE.SdfLayer_GetObjectAtPath(swigCPtr, SdfPath.getCPtr(path)), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_SdfPrimSpecHandle GetPrimAtPath(SdfPath path) {
    SWIGTYPE_p_SdfPrimSpecHandle ret = new SWIGTYPE_p_SdfPrimSpecHandle(UsdCsPINVOKE.SdfLayer_GetPrimAtPath(swigCPtr, SdfPath.getCPtr(path)), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_SdfPropertySpecHandle GetPropertyAtPath(SdfPath path) {
    SWIGTYPE_p_SdfPropertySpecHandle ret = new SWIGTYPE_p_SdfPropertySpecHandle(UsdCsPINVOKE.SdfLayer_GetPropertyAtPath(swigCPtr, SdfPath.getCPtr(path)), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_SdfAttributeSpecHandle GetAttributeAtPath(SdfPath path) {
    SWIGTYPE_p_SdfAttributeSpecHandle ret = new SWIGTYPE_p_SdfAttributeSpecHandle(UsdCsPINVOKE.SdfLayer_GetAttributeAtPath(swigCPtr, SdfPath.getCPtr(path)), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_SdfRelationshipSpecHandle GetRelationshipAtPath(SdfPath path) {
    SWIGTYPE_p_SdfRelationshipSpecHandle ret = new SWIGTYPE_p_SdfRelationshipSpecHandle(UsdCsPINVOKE.SdfLayer_GetRelationshipAtPath(swigCPtr, SdfPath.getCPtr(path)), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool PermissionToEdit() {
    bool ret = UsdCsPINVOKE.SdfLayer_PermissionToEdit(swigCPtr);
    return ret;
  }

  public bool PermissionToSave() {
    bool ret = UsdCsPINVOKE.SdfLayer_PermissionToSave(swigCPtr);
    return ret;
  }

  public void SetPermissionToEdit(bool allow) {
    UsdCsPINVOKE.SdfLayer_SetPermissionToEdit(swigCPtr, allow);
  }

  public void SetPermissionToSave(bool allow) {
    UsdCsPINVOKE.SdfLayer_SetPermissionToSave(swigCPtr, allow);
  }

  public SdfNamespaceEditDetail.Result CanApply(SdfBatchNamespaceEdit arg0, SdfNamespaceEditDetailVector details) {
    SdfNamespaceEditDetail.Result ret = (SdfNamespaceEditDetail.Result)UsdCsPINVOKE.SdfLayer_CanApply__SWIG_0(swigCPtr, SdfBatchNamespaceEdit.getCPtr(arg0), SdfNamespaceEditDetailVector.getCPtr(details));
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SdfNamespaceEditDetail.Result CanApply(SdfBatchNamespaceEdit arg0) {
    SdfNamespaceEditDetail.Result ret = (SdfNamespaceEditDetail.Result)UsdCsPINVOKE.SdfLayer_CanApply__SWIG_1(swigCPtr, SdfBatchNamespaceEdit.getCPtr(arg0));
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Apply(SdfBatchNamespaceEdit arg0) {
    bool ret = UsdCsPINVOKE.SdfLayer_Apply(swigCPtr, SdfBatchNamespaceEdit.getCPtr(arg0));
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_SdfLayerStateDelegateBasePtr GetStateDelegate() {
    SWIGTYPE_p_SdfLayerStateDelegateBasePtr ret = new SWIGTYPE_p_SdfLayerStateDelegateBasePtr(UsdCsPINVOKE.SdfLayer_GetStateDelegate(swigCPtr), true);
    return ret;
  }

  public void SetStateDelegate(SWIGTYPE_p_SdfLayerStateDelegateBaseRefPtr arg0) {
    UsdCsPINVOKE.SdfLayer_SetStateDelegate(swigCPtr, SWIGTYPE_p_SdfLayerStateDelegateBaseRefPtr.getCPtr(arg0));
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool IsDirty() {
    bool ret = UsdCsPINVOKE.SdfLayer_IsDirty(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_std__setT_double_t ListAllTimeSamples() {
    SWIGTYPE_p_std__setT_double_t ret = new SWIGTYPE_p_std__setT_double_t(UsdCsPINVOKE.SdfLayer_ListAllTimeSamples(swigCPtr), true);
    return ret;
  }

  public bool GetBracketingTimeSamples(double time, ref double tLower, ref double tUpper) {
    bool ret = UsdCsPINVOKE.SdfLayer_GetBracketingTimeSamples(swigCPtr, time, ref tLower, ref tUpper);
    return ret;
  }

  public uint GetNumTimeSamplesForPath(SdfPath path) {
    uint ret = UsdCsPINVOKE.SdfLayer_GetNumTimeSamplesForPath(swigCPtr, SdfPath.getCPtr(path));
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__setT_double_t ListTimeSamplesForPath(SdfPath path) {
    SWIGTYPE_p_std__setT_double_t ret = new SWIGTYPE_p_std__setT_double_t(UsdCsPINVOKE.SdfLayer_ListTimeSamplesForPath(swigCPtr, SdfPath.getCPtr(path)), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool GetBracketingTimeSamplesForPath(SdfPath path, double time, ref double tLower, ref double tUpper) {
    bool ret = UsdCsPINVOKE.SdfLayer_GetBracketingTimeSamplesForPath(swigCPtr, SdfPath.getCPtr(path), time, ref tLower, ref tUpper);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool QueryTimeSample(SdfPath path, double time) {
    bool ret = UsdCsPINVOKE.SdfLayer_QueryTimeSample(swigCPtr, SdfPath.getCPtr(path), time);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void EraseTimeSample(SdfPath path, double time) {
    UsdCsPINVOKE.SdfLayer_EraseTimeSample(swigCPtr, SdfPath.getCPtr(path), time);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DumpLayerInfo() {
    UsdCsPINVOKE.SdfLayer_DumpLayerInfo();
  }

  public bool WriteDataFile(string filename) {
    bool ret = UsdCsPINVOKE.SdfLayer_WriteDataFile(swigCPtr, filename);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string ExportToString() {
    string ret = UsdCsPINVOKE.SdfLayer_ExportToString(swigCPtr);
    return ret;
  }

}

}
