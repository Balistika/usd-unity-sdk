//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace pxr {

public class UsdShadeLook : UsdShadeMaterial {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal UsdShadeLook(global::System.IntPtr cPtr, bool cMemoryOwn) : base(UsdCsPINVOKE.UsdShadeLook_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(UsdShadeLook obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~UsdShadeLook() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          UsdCsPINVOKE.delete_UsdShadeLook(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public UsdShadeLook(UsdPrim prim) : this(UsdCsPINVOKE.new_UsdShadeLook__SWIG_0(UsdPrim.getCPtr(prim)), true) {
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
  }

  public UsdShadeLook() : this(UsdCsPINVOKE.new_UsdShadeLook__SWIG_1(), true) {
  }

  public UsdShadeLook(UsdSchemaBase schemaObj) : this(UsdCsPINVOKE.new_UsdShadeLook__SWIG_2(UsdSchemaBase.getCPtr(schemaObj)), true) {
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
  }

  public new static TfTokenVector GetSchemaAttributeNames(bool includeInherited) {
    TfTokenVector ret = new TfTokenVector(UsdCsPINVOKE.UsdShadeLook_GetSchemaAttributeNames__SWIG_0(includeInherited), false);
    return ret;
  }

  public new static TfTokenVector GetSchemaAttributeNames() {
    TfTokenVector ret = new TfTokenVector(UsdCsPINVOKE.UsdShadeLook_GetSchemaAttributeNames__SWIG_1(), false);
    return ret;
  }

  public new static UsdShadeLook Get(UsdStageWeakPtr stage, SdfPath path) {
    UsdShadeLook ret = new UsdShadeLook(UsdCsPINVOKE.UsdShadeLook_Get(UsdStageWeakPtr.getCPtr(stage), SdfPath.getCPtr(path)), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public new static UsdShadeLook Define(UsdStageWeakPtr stage, SdfPath path) {
    UsdShadeLook ret = new UsdShadeLook(UsdCsPINVOKE.UsdShadeLook_Define(UsdStageWeakPtr.getCPtr(stage), SdfPath.getCPtr(path)), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Bind(UsdPrim prim) {
    bool ret = UsdCsPINVOKE.UsdShadeLook_Bind(swigCPtr, UsdPrim.getCPtr(prim));
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool Unbind(UsdPrim prim) {
    bool ret = UsdCsPINVOKE.UsdShadeLook_Unbind(UsdPrim.getCPtr(prim));
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public new static UsdRelationship GetBindingRel(UsdPrim prim) {
    UsdRelationship ret = new UsdRelationship(UsdCsPINVOKE.UsdShadeLook_GetBindingRel(UsdPrim.getCPtr(prim)), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static UsdShadeLook GetBoundLook(UsdPrim prim) {
    UsdShadeLook ret = new UsdShadeLook(UsdCsPINVOKE.UsdShadeLook_GetBoundLook(UsdPrim.getCPtr(prim)), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public new SWIGTYPE_p_std__pairT_UsdStageWeakPtr_UsdEditTarget_t GetEditContextForVariant(TfToken lookVariantName, SdfLayerHandle layer) {
    SWIGTYPE_p_std__pairT_UsdStageWeakPtr_UsdEditTarget_t ret = new SWIGTYPE_p_std__pairT_UsdStageWeakPtr_UsdEditTarget_t(UsdCsPINVOKE.UsdShadeLook_GetEditContextForVariant__SWIG_0(swigCPtr, TfToken.getCPtr(lookVariantName), SdfLayerHandle.getCPtr(layer)), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public new SWIGTYPE_p_std__pairT_UsdStageWeakPtr_UsdEditTarget_t GetEditContextForVariant(TfToken lookVariantName) {
    SWIGTYPE_p_std__pairT_UsdStageWeakPtr_UsdEditTarget_t ret = new SWIGTYPE_p_std__pairT_UsdStageWeakPtr_UsdEditTarget_t(UsdCsPINVOKE.UsdShadeLook_GetEditContextForVariant__SWIG_1(swigCPtr, TfToken.getCPtr(lookVariantName)), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdVariantSet GetLookVariant() {
    UsdVariantSet ret = new UsdVariantSet(UsdCsPINVOKE.UsdShadeLook_GetLookVariant(swigCPtr), true);
    return ret;
  }

  public static bool CreateMasterLookVariant(UsdPrim masterPrim, UsdPrimVector lookPrims, TfToken masterVariantSetName) {
    bool ret = UsdCsPINVOKE.UsdShadeLook_CreateMasterLookVariant__SWIG_0(UsdPrim.getCPtr(masterPrim), UsdPrimVector.getCPtr(lookPrims), TfToken.getCPtr(masterVariantSetName));
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool CreateMasterLookVariant(UsdPrim masterPrim, UsdPrimVector lookPrims) {
    bool ret = UsdCsPINVOKE.UsdShadeLook_CreateMasterLookVariant__SWIG_1(UsdPrim.getCPtr(masterPrim), UsdPrimVector.getCPtr(lookPrims));
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdShadeLook GetBaseLook() {
    UsdShadeLook ret = new UsdShadeLook(UsdCsPINVOKE.UsdShadeLook_GetBaseLook(swigCPtr), true);
    return ret;
  }

  public SdfPath GetBaseLookPath() {
    SdfPath ret = new SdfPath(UsdCsPINVOKE.UsdShadeLook_GetBaseLookPath(swigCPtr), true);
    return ret;
  }

  public void SetBaseLook(UsdShadeLook baseLook) {
    UsdCsPINVOKE.UsdShadeLook_SetBaseLook(swigCPtr, UsdShadeLook.getCPtr(baseLook));
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetBaseLookPath(SdfPath baseLookPath) {
    UsdCsPINVOKE.UsdShadeLook_SetBaseLookPath(swigCPtr, SdfPath.getCPtr(baseLookPath));
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void ClearBaseLook() {
    UsdCsPINVOKE.UsdShadeLook_ClearBaseLook(swigCPtr);
  }

  public bool HasBaseLook() {
    bool ret = UsdCsPINVOKE.UsdShadeLook_HasBaseLook(swigCPtr);
    return ret;
  }

  public static UsdGeomFaceSetAPI CreateLookFaceSet(UsdPrim prim) {
    UsdGeomFaceSetAPI ret = new UsdGeomFaceSetAPI(UsdCsPINVOKE.UsdShadeLook_CreateLookFaceSet(UsdPrim.getCPtr(prim)), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static UsdGeomFaceSetAPI GetLookFaceSet(UsdPrim prim) {
    UsdGeomFaceSetAPI ret = new UsdGeomFaceSetAPI(UsdCsPINVOKE.UsdShadeLook_GetLookFaceSet(UsdPrim.getCPtr(prim)), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool HasLookFaceSet(UsdPrim prim) {
    bool ret = UsdCsPINVOKE.UsdShadeLook_HasLookFaceSet(UsdPrim.getCPtr(prim));
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static readonly bool IsConcrete = UsdCsPINVOKE.UsdShadeLook_IsConcrete_get();
}

}
