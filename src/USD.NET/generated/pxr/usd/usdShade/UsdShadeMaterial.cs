//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace pxr {

public class UsdShadeMaterial : UsdShadeNodeGraph {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal UsdShadeMaterial(global::System.IntPtr cPtr, bool cMemoryOwn) : base(UsdCsPINVOKE.UsdShadeMaterial_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(UsdShadeMaterial obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~UsdShadeMaterial() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          UsdCsPINVOKE.delete_UsdShadeMaterial(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public UsdShadeMaterial(UsdPrim prim) : this(UsdCsPINVOKE.new_UsdShadeMaterial__SWIG_0(UsdPrim.getCPtr(prim)), true) {
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
  }

  public UsdShadeMaterial() : this(UsdCsPINVOKE.new_UsdShadeMaterial__SWIG_1(), true) {
  }

  public UsdShadeMaterial(UsdSchemaBase schemaObj) : this(UsdCsPINVOKE.new_UsdShadeMaterial__SWIG_2(UsdSchemaBase.getCPtr(schemaObj)), true) {
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
  }

  public new static TfTokenVector GetSchemaAttributeNames(bool includeInherited) {
    TfTokenVector ret = new TfTokenVector(UsdCsPINVOKE.UsdShadeMaterial_GetSchemaAttributeNames__SWIG_0(includeInherited), false);
    return ret;
  }

  public new static TfTokenVector GetSchemaAttributeNames() {
    TfTokenVector ret = new TfTokenVector(UsdCsPINVOKE.UsdShadeMaterial_GetSchemaAttributeNames__SWIG_1(), false);
    return ret;
  }

  public new static UsdShadeMaterial Get(UsdStageWeakPtr stage, SdfPath path) {
    UsdShadeMaterial ret = new UsdShadeMaterial(UsdCsPINVOKE.UsdShadeMaterial_Get(UsdStageWeakPtr.getCPtr(stage), SdfPath.getCPtr(path)), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public new static UsdShadeMaterial Define(UsdStageWeakPtr stage, SdfPath path) {
    UsdShadeMaterial ret = new UsdShadeMaterial(UsdCsPINVOKE.UsdShadeMaterial_Define(UsdStageWeakPtr.getCPtr(stage), SdfPath.getCPtr(path)), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Bind(UsdPrim prim) {
    bool ret = UsdCsPINVOKE.UsdShadeMaterial_Bind(swigCPtr, UsdPrim.getCPtr(prim));
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool Unbind(UsdPrim prim) {
    bool ret = UsdCsPINVOKE.UsdShadeMaterial_Unbind(UsdPrim.getCPtr(prim));
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static UsdRelationship GetBindingRel(UsdPrim prim) {
    UsdRelationship ret = new UsdRelationship(UsdCsPINVOKE.UsdShadeMaterial_GetBindingRel(UsdPrim.getCPtr(prim)), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static UsdShadeMaterial GetBoundMaterial(UsdPrim prim) {
    UsdShadeMaterial ret = new UsdShadeMaterial(UsdCsPINVOKE.UsdShadeMaterial_GetBoundMaterial(UsdPrim.getCPtr(prim)), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__pairT_UsdStageWeakPtr_UsdEditTarget_t GetEditContextForVariant(TfToken MaterialVariantName, SdfLayerHandle layer) {
    SWIGTYPE_p_std__pairT_UsdStageWeakPtr_UsdEditTarget_t ret = new SWIGTYPE_p_std__pairT_UsdStageWeakPtr_UsdEditTarget_t(UsdCsPINVOKE.UsdShadeMaterial_GetEditContextForVariant__SWIG_0(swigCPtr, TfToken.getCPtr(MaterialVariantName), SdfLayerHandle.getCPtr(layer)), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__pairT_UsdStageWeakPtr_UsdEditTarget_t GetEditContextForVariant(TfToken MaterialVariantName) {
    SWIGTYPE_p_std__pairT_UsdStageWeakPtr_UsdEditTarget_t ret = new SWIGTYPE_p_std__pairT_UsdStageWeakPtr_UsdEditTarget_t(UsdCsPINVOKE.UsdShadeMaterial_GetEditContextForVariant__SWIG_1(swigCPtr, TfToken.getCPtr(MaterialVariantName)), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdVariantSet GetMaterialVariant() {
    UsdVariantSet ret = new UsdVariantSet(UsdCsPINVOKE.UsdShadeMaterial_GetMaterialVariant(swigCPtr), true);
    return ret;
  }

  public static bool CreateMasterMaterialVariant(UsdPrim masterPrim, UsdPrimVector MaterialPrims, TfToken masterVariantSetName) {
    bool ret = UsdCsPINVOKE.UsdShadeMaterial_CreateMasterMaterialVariant__SWIG_0(UsdPrim.getCPtr(masterPrim), UsdPrimVector.getCPtr(MaterialPrims), TfToken.getCPtr(masterVariantSetName));
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool CreateMasterMaterialVariant(UsdPrim masterPrim, UsdPrimVector MaterialPrims) {
    bool ret = UsdCsPINVOKE.UsdShadeMaterial_CreateMasterMaterialVariant__SWIG_1(UsdPrim.getCPtr(masterPrim), UsdPrimVector.getCPtr(MaterialPrims));
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdShadeMaterial GetBaseMaterial() {
    UsdShadeMaterial ret = new UsdShadeMaterial(UsdCsPINVOKE.UsdShadeMaterial_GetBaseMaterial(swigCPtr), true);
    return ret;
  }

  public SdfPath GetBaseMaterialPath() {
    SdfPath ret = new SdfPath(UsdCsPINVOKE.UsdShadeMaterial_GetBaseMaterialPath(swigCPtr), true);
    return ret;
  }

  public void SetBaseMaterial(UsdShadeMaterial baseMaterial) {
    UsdCsPINVOKE.UsdShadeMaterial_SetBaseMaterial(swigCPtr, UsdShadeMaterial.getCPtr(baseMaterial));
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetBaseMaterialPath(SdfPath baseMaterialPath) {
    UsdCsPINVOKE.UsdShadeMaterial_SetBaseMaterialPath(swigCPtr, SdfPath.getCPtr(baseMaterialPath));
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void ClearBaseMaterial() {
    UsdCsPINVOKE.UsdShadeMaterial_ClearBaseMaterial(swigCPtr);
  }

  public bool HasBaseMaterial() {
    bool ret = UsdCsPINVOKE.UsdShadeMaterial_HasBaseMaterial(swigCPtr);
    return ret;
  }

  public static SWIGTYPE_p_UsdGeomSubset CreateMaterialBindFaceSubset(UsdGeomImageable geom, TfToken subsetName, VtIntArray indices) {
    SWIGTYPE_p_UsdGeomSubset ret = new SWIGTYPE_p_UsdGeomSubset(UsdCsPINVOKE.UsdShadeMaterial_CreateMaterialBindFaceSubset(UsdGeomImageable.getCPtr(geom), TfToken.getCPtr(subsetName), VtIntArray.getCPtr(indices)), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_std__vectorT_UsdGeomSubset_t GetMaterialBindFaceSubsets(UsdGeomImageable geom) {
    SWIGTYPE_p_std__vectorT_UsdGeomSubset_t ret = new SWIGTYPE_p_std__vectorT_UsdGeomSubset_t(UsdCsPINVOKE.UsdShadeMaterial_GetMaterialBindFaceSubsets(UsdGeomImageable.getCPtr(geom)), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool SetMaterialBindFaceSubsetsFamilyType(UsdGeomImageable geom, SWIGTYPE_p_UsdGeomSubset__FamilyType familyType) {
    bool ret = UsdCsPINVOKE.UsdShadeMaterial_SetMaterialBindFaceSubsetsFamilyType(UsdGeomImageable.getCPtr(geom), SWIGTYPE_p_UsdGeomSubset__FamilyType.getCPtr(familyType));
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_UsdGeomSubset__FamilyType GetMaterialBindFaceSubsetsFamilyType(UsdGeomImageable geom) {
    SWIGTYPE_p_UsdGeomSubset__FamilyType ret = new SWIGTYPE_p_UsdGeomSubset__FamilyType(UsdCsPINVOKE.UsdShadeMaterial_GetMaterialBindFaceSubsetsFamilyType(UsdGeomImageable.getCPtr(geom)), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static UsdGeomFaceSetAPI CreateMaterialFaceSet(UsdPrim prim) {
    UsdGeomFaceSetAPI ret = new UsdGeomFaceSetAPI(UsdCsPINVOKE.UsdShadeMaterial_CreateMaterialFaceSet(UsdPrim.getCPtr(prim)), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static UsdGeomFaceSetAPI GetMaterialFaceSet(UsdPrim prim) {
    UsdGeomFaceSetAPI ret = new UsdGeomFaceSetAPI(UsdCsPINVOKE.UsdShadeMaterial_GetMaterialFaceSet(UsdPrim.getCPtr(prim)), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool HasMaterialFaceSet(UsdPrim prim) {
    bool ret = UsdCsPINVOKE.UsdShadeMaterial_HasMaterialFaceSet(UsdPrim.getCPtr(prim));
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static readonly bool IsConcrete = UsdCsPINVOKE.UsdShadeMaterial_IsConcrete_get();
}

}
