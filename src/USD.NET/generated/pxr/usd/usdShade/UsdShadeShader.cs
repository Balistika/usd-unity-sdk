//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace pxr {

public class UsdShadeShader : UsdTyped {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal UsdShadeShader(global::System.IntPtr cPtr, bool cMemoryOwn) : base(UsdCsPINVOKE.UsdShadeShader_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(UsdShadeShader obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~UsdShadeShader() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          UsdCsPINVOKE.delete_UsdShadeShader(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public UsdShadeShader(UsdPrim prim) : this(UsdCsPINVOKE.new_UsdShadeShader__SWIG_0(UsdPrim.getCPtr(prim)), true) {
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
  }

  public UsdShadeShader() : this(UsdCsPINVOKE.new_UsdShadeShader__SWIG_1(), true) {
  }

  public UsdShadeShader(UsdSchemaBase schemaObj) : this(UsdCsPINVOKE.new_UsdShadeShader__SWIG_2(UsdSchemaBase.getCPtr(schemaObj)), true) {
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
  }

  public new static TfTokenVector GetSchemaAttributeNames(bool includeInherited) {
    TfTokenVector ret = new TfTokenVector(UsdCsPINVOKE.UsdShadeShader_GetSchemaAttributeNames__SWIG_0(includeInherited), false);
    return ret;
  }

  public new static TfTokenVector GetSchemaAttributeNames() {
    TfTokenVector ret = new TfTokenVector(UsdCsPINVOKE.UsdShadeShader_GetSchemaAttributeNames__SWIG_1(), false);
    return ret;
  }

  public new static UsdShadeShader Get(UsdStageWeakPtr stage, SdfPath path) {
    UsdShadeShader ret = new UsdShadeShader(UsdCsPINVOKE.UsdShadeShader_Get(UsdStageWeakPtr.getCPtr(stage), SdfPath.getCPtr(path)), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static UsdShadeShader Define(UsdStageWeakPtr stage, SdfPath path) {
    UsdShadeShader ret = new UsdShadeShader(UsdCsPINVOKE.UsdShadeShader_Define(UsdStageWeakPtr.getCPtr(stage), SdfPath.getCPtr(path)), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdAttribute GetIdAttr() {
    UsdAttribute ret = new UsdAttribute(UsdCsPINVOKE.UsdShadeShader_GetIdAttr(swigCPtr), true);
    return ret;
  }

  public UsdAttribute CreateIdAttr(VtValue defaultValue, bool writeSparsely) {
    UsdAttribute ret = new UsdAttribute(UsdCsPINVOKE.UsdShadeShader_CreateIdAttr__SWIG_0(swigCPtr, VtValue.getCPtr(defaultValue), writeSparsely), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdAttribute CreateIdAttr(VtValue defaultValue) {
    UsdAttribute ret = new UsdAttribute(UsdCsPINVOKE.UsdShadeShader_CreateIdAttr__SWIG_1(swigCPtr, VtValue.getCPtr(defaultValue)), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdAttribute CreateIdAttr() {
    UsdAttribute ret = new UsdAttribute(UsdCsPINVOKE.UsdShadeShader_CreateIdAttr__SWIG_2(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_UsdShadeConnectableAPI ConnectableAPI() {
    SWIGTYPE_p_UsdShadeConnectableAPI ret = new SWIGTYPE_p_UsdShadeConnectableAPI(UsdCsPINVOKE.UsdShadeShader_ConnectableAPI(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_UsdShadeOutput CreateOutput(TfToken name, SdfValueTypeName typeName) {
    SWIGTYPE_p_UsdShadeOutput ret = new SWIGTYPE_p_UsdShadeOutput(UsdCsPINVOKE.UsdShadeShader_CreateOutput(swigCPtr, TfToken.getCPtr(name), SdfValueTypeName.getCPtr(typeName)), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_UsdShadeOutput GetOutput(TfToken name) {
    SWIGTYPE_p_UsdShadeOutput ret = new SWIGTYPE_p_UsdShadeOutput(UsdCsPINVOKE.UsdShadeShader_GetOutput(swigCPtr, TfToken.getCPtr(name)), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_UsdShadeOutput_t GetOutputs() {
    SWIGTYPE_p_std__vectorT_UsdShadeOutput_t ret = new SWIGTYPE_p_std__vectorT_UsdShadeOutput_t(UsdCsPINVOKE.UsdShadeShader_GetOutputs(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_UsdShadeInput CreateInput(TfToken name, SdfValueTypeName typeName) {
    SWIGTYPE_p_UsdShadeInput ret = new SWIGTYPE_p_UsdShadeInput(UsdCsPINVOKE.UsdShadeShader_CreateInput(swigCPtr, TfToken.getCPtr(name), SdfValueTypeName.getCPtr(typeName)), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_UsdShadeInput GetInput(TfToken name) {
    SWIGTYPE_p_UsdShadeInput ret = new SWIGTYPE_p_UsdShadeInput(UsdCsPINVOKE.UsdShadeShader_GetInput(swigCPtr, TfToken.getCPtr(name)), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_UsdShadeInput_t GetInputs() {
    SWIGTYPE_p_std__vectorT_UsdShadeInput_t ret = new SWIGTYPE_p_std__vectorT_UsdShadeInput_t(UsdCsPINVOKE.UsdShadeShader_GetInputs(swigCPtr), true);
    return ret;
  }

  public static readonly bool IsConcrete = UsdCsPINVOKE.UsdShadeShader_IsConcrete_get();
  public static readonly bool IsTyped = UsdCsPINVOKE.UsdShadeShader_IsTyped_get();
}

}
